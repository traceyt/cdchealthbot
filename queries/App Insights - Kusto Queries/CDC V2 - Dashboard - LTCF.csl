// this is where you put the name of your bot instance
let tenantName_ = "traceyt-healthbot-u2gdlbf";

let msg_outcome_list_ = dynamic(['MSG 0', 
                            'MSG 1', 
                            'MSG 2', 
                            'MSG 3', 
                            'MSG 4', 
                            'MSG 5', 
                            //'MSG 6',  // including leaving out msg 6 as it is captured as the hcf flag
                            'MSG 7', 
                            'MSG 8', 
                            'MSG 9', 
                            'MSG 10', 
                            'MSG 11', 
                            'MSG 12', 
                            'MSG 13']);

// this will filter out the conversation ids that have duplicate entries
customEvents
| extend conv_id_ = tostring(customDimensions.conv_id)
| extend dialogName_ = tostring(customDimensions.dialogName)
| extend messageType_ = name
| where customDimensions.tenantName == tenantName_
| where dialogName_ == "/scenarios/covid19"
| where messageType_ == "ScenarioStart" 
| summarize count_ = count() by conv_id_
| where count_ > 1
// now get all the rest of the conversations that were not duplicated
| join kind=rightanti (                            
        customEvents
        | extend conv_id_ = tostring(customDimensions.conv_id)
        | extend scenarioStartTime_ = timestamp 
        | extend dialogName_ = tostring(customDimensions.dialogName)
        | where customDimensions.tenantName == tenantName_
        | where name == "ScenarioStart"
        | where dialogName_ == '/scenarios/covid19'
        | where conv_id_ !in (bad_conv_id_)
        | order by conv_id_,timestamp asc
        | project conv_id_, dialogName_ , name, date_ =  format_datetime(scenarioStartTime_, 'yyyy-MM-dd'), hour_ = format_datetime(scenarioStartTime_, 'HH')
) on conv_id_ 
// get the end time of the conversation - conversations that have an end time are completed
| join kind= inner (
        customEvents
        | extend conv_id_ = tostring(customDimensions.conv_id)
        | extend dialogName_ = tostring(customDimensions.dialogName)
        | extend dialogOutcome_ = tostring(customDimensions.dialogOutcome)
        | extend scenarioEndTime_ = timestamp 
        | where customDimensions.tenantName == tenantName_
        | where name == "ScenarioEnded"
        | where dialogName_ == '/scenarios/covid19_core' // this catches the ending time in the conversation, if the wrapper is extended then likely you should pick up the wrapper ending time.
        | project conv_id_, scenarioEndTime_ , dialogName_ , dialogOutcome_, name
) on conv_id_
// get the outcome of the conversation.  note that we are ignorring the MSG 6 outcome as it is already captured by the HCF flag
| join kind= inner (
   customEvents
        | extend conv_id_ = tostring(customDimensions.conv_id)
        | extend step_ = todynamic(tostring(customDimensions.step))   
        | extend response_ = todynamic(tostring(step_.response))
        | extend outcome_ = step_.label  
        | where customDimensions.tenantName == tenantName_ 
        | where name == "StepExecuted"
        | where outcome_ in (msg_outcome_list_)
        | project conv_id_ , outcome_
) on conv_id_ 
// get the state response
| join kind= inner (
   customEvents
        | extend conv_id_ = tostring(customDimensions.conv_id)        
        | extend step_ = todynamic(tostring(customDimensions.step))   
        | extend response_ = todynamic(tostring(step_.response))
        | extend stepLabel_ = step_.label  
        | extend state_ = response_.state   
        | extend dialogOutcome_ = tostring(customDimensions.dialogOutcome)
        | extend dialogName_ = tostring(customDimensions.dialogName)
        | extend text_ = tostring(customDimensions.text)
        | where customDimensions.tenantName == tenantName_ 
        | where name == "StepExecuted"
        | where stepLabel_ == "State"
        | project conv_id_ , state_
) on conv_id_
// get the long term care facility response
| join kind= leftouter (
   customEvents
        | extend conv_id_ = tostring(customDimensions.conv_id)
        | extend step_ = todynamic(tostring(customDimensions.step))   
        | extend response_ = todynamic(tostring(step_.response))
        | extend stepLabel_ = step_.label  
        | extend ltcf_ = response_.entity
        | extend ltcfIndex_ = response_.index           
        | where customDimensions.tenantName == tenantName_ 
        | where name == "StepExecuted"
        | where stepLabel_ == "LTCF"
        | project conv_id_ , ltcf_, ltcfIndex_ 
) on conv_id_ 
| summarize count() by tostring(state_), 
        date_,
        hour_,
        tostring(outcome_),
        tostring(ltcf_), toint(ltcfIndex_)
