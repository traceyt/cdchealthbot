// this is where you put the name of your bot instance
let tenantName_ = 'traceyt-healthbot-dev-inga46h';
let dialogname_covid19_ = '/scenarios/covid19';
let dialogname_covid19_core_ = '/scenarios/covid19_core';

let msg_outcome_list_ = dynamic(['MSG 0', 
                            'MSG 1', 
                            'MSG 2', 
                            'MSG 3', 
                            'MSG 4', 
                            'MSG 5', 
                            //'MSG 6',  // leaving out msg 6 as it is captured as the hcf flag
                            'MSG 7', 
                            'MSG 8', 
                            'MSG 9', 
                            'MSG 10', 
                            'MSG 11', 
                            'MSG 12', 
                            'MSG 13']);

// this will filter out the conversation ids that have duplicate entries
customEvents
| extend conv_id_ = tostring(customDimensions.conv_id)
| extend dialogName_ = tostring(customDimensions.dialogName)
| extend messageType_ = name
| where customDimensions.tenantName == tenantName_
| where dialogName_ == dialogname_covid19_
| where messageType_ == 'ScenarioStart' 
| summarize count_ = count() by conv_id_
| where count_ > 1
// now get all the rest of the conversations that were not duplicated
| join kind=rightanti (                            
        customEvents
        | extend conv_id_ = tostring(customDimensions.conv_id)
        | extend payload_ = todynamic(tostring(customDimensions.payload))   
        | extend scenarioEndTime_ = timestamp 
        | where customDimensions.tenantName == tenantName_
        | where name == 'CDC_CORE_OUTCOME'
        | order by conv_id_,timestamp asc
        | project conv_id_, name, date_ =  format_datetime(scenarioEndTime_, 'yyyy-MM-dd'), hour_ = format_datetime(scenarioEndTime_, 'HH'), 
                outcome_ = tostring(parse_json(tostring(customDimensions.payload)).message_outcome),
                age_ = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(customDimensions.payload)).core_scenario_data)).age)).entity),
                ageIndex_ = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(customDimensions.payload)).core_scenario_data)).age)).index) ,
                gender_ = payload_.core_scenario_data.gender.entity,
                genderIndex_ = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(customDimensions.payload)).core_scenario_data)).gender)).entity),
                hcf_ = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(customDimensions.payload)).core_scenario_data)).healthcare_facility)).entity) ,
                hcfIndex_ = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(customDimensions.payload)).core_scenario_data)).healthcare_facility)).index) 
) on conv_id_ 
// get the state response
| join kind= inner (
   customEvents
        | extend conv_id_ = tostring(customDimensions.conv_id)        
        | extend wrapper_payload_ = todynamic(tostring(customDimensions.payload))   
        | where customDimensions.tenantName == tenantName_ 
        | where name == 'CDC_WRAPPER_OUTCOME'
        | project conv_id_ , wrapper_payload_.wrapper_scenario_data.country.entity, wrapper_payload_.wrapper_scenario_data.country.index, state_ = wrapper_payload_.wrapper_scenario_data.user_state.state
) on conv_id_
| summarize count() by tostring(state_), 
        date_,
        hour_,
        tostring(outcome_), 
        tostring(age_), toint(ageIndex_), 
        tostring(gender_), toint(genderIndex_), 
        tostring(hcf_), toint(hcfIndex_) 